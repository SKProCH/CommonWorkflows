name: Build and publish

on:
  workflow_call:
    inputs:
      publish-nightly:
        description: 'Should nightly versions be published to feeds'
        required: true
        type: boolean
      dotnet-version:
        description: 'Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx'
        required: true
        type: string
      workloads:
        description: 'Optional workload list to install'
        required: false
        type: string
      build-command:
        description: 'Overrides a build command'
        required: false
        type: string
    secrets:
      NUGET_KEY:
        required: true

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0
      - name: Checkout workflows repo
        uses: actions/checkout@v4
        with:
          repository: SKProCH/CommonWorkflows
          path: .commonWorkflows
          fetch-depth: 0
      - name: 'Cache: .nuke/temp, ~/.nuget/packages'
        uses: actions/cache@v3
        with:
          path: |
            .nuke/temp
            ~/.nuget/packages
          key: ${{ runner.os }}-${{ hashFiles('**/global.json', '**/*.csproj', '**/Directory.Packages.props') }}
      - name: 'Install workload'
        if: "${{ inputs.workloads != '' }}"
        run: dotnet workload install ${{ inputs.workloads }}
      - name: 'Install minver'
        run: dotnet tool install --global minver-cli
      - name: 'Resolve version'
        run: |
          minver -t v -p nightly -v info
          VERSION=$(minver -t v -p nightly -v error)
          echo "Version=${VERSION}" >> $GITHUB_ENV
          if git describe --exact-match --tags $(git rev-parse HEAD) > /dev/null 2>&1; then
            echo "HasTag=true" >> $GITHUB_ENV
            echo "Tag found: ${TAG_NAME}"
            TAG_NAME=$(git describe --tags $(git rev-parse HEAD))
            RELEASE_DESCRIPTION=$(curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/generate-notes \
              -d '{"tag_name":"${TAG_NAME}"}' | jq -r 'body')
            ESCAPED=$(printf '%q' "${TAG_NAME}\n\n${RELEASE_DESCRIPTION}")
            echo "ReleaseNotes=${ESCAPED}" >> $GITHUB_ENV
          else
            echo "HasTag=false" >> $GITHUB_ENV
            echo "No tag found on the current commit."
            RELEASE_DESCRIPTION=$(git log -1 --pretty=%B)
            URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/$(git rev-parse HEAD)
            ESCAPED=$(printf '%q' "This version based on commit ${URL}\n\n${RELEASE_DESCRIPTION}")
            echo "ReleaseNotes=${ESCAPED}" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build project
        if: "${{ inputs.build-command == '' }}"
        run: dotnet pack /p:Version=${{ env.Version }} /p:PackageReleaseNotes=${{ env.ReleaseNotes }}

      - name: Custom build
        if: "${{ inputs.build-command != '' }}"
        run: ${{ inputs.build-command }} /p:Version=${{ env.Version }} /p:PackageReleaseNotes=${{ env.ReleaseNotes }}
        
      - name: Publish to Nuget
        if: "${{ env.HasTag == 'true' || inputs.publish-nightly }}"
        run: |
          dotnet nuget push "**/*.nupkg" --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
          dotnet nuget push "**/*.snupkg" --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      
      - name: Hide old versions from Nuget
        if: "${{ env.HasTag == 'true' }}"
        run: .commonWorkflows/build.sh HideOutdatedNightlyPackages --nuget-api-key=${{ secrets.NUGET_KEY }}

      - name: Create release
        if: "${{ env.HasTag == 'true' }}"
        run: .commonWorkflows/build.sh CreateRelease --nuget-api-key=${{ secrets.NUGET_KEY }} --tag=${{ env.Version }}