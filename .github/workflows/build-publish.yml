name: Build and publish

on:
  workflow_call:
    inputs:
      publish-nightly:
        description: 'Should nightly versions be published to feeds'
        required: true
        type: boolean
      only-build:
        description: 'If this should only build package, and disable any publishing'
        required: false
        type: boolean
        default: false
      dotnet-version:
        description: 'Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx'
        required: true
        type: string
      workloads:
        description: 'Optional workload list to install'
        required: false
        type: string
      build-command:
        description: 'Overrides a build command. Do not include dotnet in start'
        required: false
        type: string
    secrets:
      NUGET_KEY:
        required: true

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0
      - name: Checkout workflows repo
        uses: actions/checkout@v4
        with:
          repository: SKProCH/CommonWorkflows
          path: .commonWorkflows
          fetch-depth: 0
      - name: Move nuke project to root to avoid MSBuild inheritance
        run: mv .commonWorkflows ../.commonWorkflows
      - name: 'Cache: .nuke/temp, ~/.nuget/packages'
        uses: actions/cache@v3
        with:
          path: |
            .nuke/temp
            ~/.nuget/packages
          key: ${{ runner.os }}-${{ hashFiles('**/global.json', '**/*.csproj', '**/Directory.Packages.props') }}
      - name: 'Restore workloads'
        run: dotnet workload restore
      - name: 'Install additional workload'
        if: "${{ inputs.workloads != '' }}"
        run: dotnet workload install ${{ inputs.workloads }}
      - name: 'Install minver'
        run: dotnet tool install --global minver-cli
      - name: 'Resolve version'
        run: |
          VERSION=$(minver -t v -p nightly -v error)
          echo "Version=${VERSION}" >> $GITHUB_ENV
          if git describe --exact-match --tags $(git rev-parse HEAD) > /dev/null 2>&1; then
            echo "HasTag=true" >> $GITHUB_ENV
          else
            echo "HasTag=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Resolve version and build project
        run: ../.commonWorkflows/build.sh ResolveVersionAndBuild --root . --build-command "${{ inputs.build-command }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Nuget
        if: "${{ !inputs.only-build && (env.HasTag == 'true' || inputs.publish-nightly) }}"
        run: |
          dotnet nuget push "**/*.nupkg" --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
          dotnet nuget push "**/*.snupkg" --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate || true
      
      - name: Hide old versions from Nuget
        if: "${{ !inputs.only-build && env.HasTag == 'true' }}"
        run: ../.commonWorkflows/build.sh HideOutdatedNightlyPackages --root . --nuget-api-key "${{ secrets.NUGET_KEY }}"

      - name: Create release
        if: "${{ !inputs.only-build && env.HasTag == 'true' }}"
        run: ../.commonWorkflows/build.sh CreateRelease --root . --nuget-api-key "${{ secrets.NUGET_KEY }}" --tag "v${{ env.Version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}